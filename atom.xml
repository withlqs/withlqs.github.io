<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Getline</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.getline.me/"/>
  <updated>2016-04-11T11:59:07.850Z</updated>
  <id>http://blog.getline.me/</id>
  
  <author>
    <name>Lqs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Character Set Problem</title>
    <link href="http://blog.getline.me/archives/character-set-problem.html"/>
    <id>http://blog.getline.me/archives/character-set-problem.html</id>
    <published>2015-12-02T02:00:00.000Z</published>
    <updated>2016-04-11T11:59:07.850Z</updated>
    
    <content type="html">&lt;ul&gt;&lt;li&gt;Time Limit: 1s&lt;/li&gt;&lt;li&gt;Memory Limit: 256MB&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;[Description]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There is a long character sequence with length $n$. For its every bit, we can choose a character from set $S$ which contains $|S|$ characters.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Set $S$ consists of three sets, $A$, $B$ and $C$. In other words, $A\cup B\cup C = S$，$A\cap B = \emptyset, A\cap C = \emptyset, B\cap C = \emptyset$.&lt;/p&gt;&lt;p&gt;We could say a sequence is legal that satisfied following condition:&lt;br&gt;Every character in set $A$ must appear even times in sequence;&lt;br&gt;Every character in set $B$ must appear odd times in sequence.&lt;br&gt;For every character in set $C$, it doesn’t have any limitation. In other wise, for every character in set $C$, it could appear even times or odd times, of course may be zero.&lt;/p&gt;&lt;p&gt;Please calculate the number of all different legal sequence with length $n$.&lt;/p&gt;&lt;p&gt;We also give you $|A|+|B|$ integers, every integer denote a character. For a integer $M_i$ we given, if number of its different prime factors is odd, $M_i$ belongs to set $A$. Otherwise, it belongs to set $B$.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Input]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First line, an integer $T$ denotes the number of test cases.&lt;/p&gt;&lt;p&gt;For every test case:&lt;br&gt;The first line, there are three integers denoting $n$, $|S|$, $M$. $1\le n\le 10^{18}$，$1\le |S|\le 200$，$0\le M\le |S|$.&lt;br&gt;The second line, there will be $|M|$ integers. The character denoted by $M_i$ belongs to set $A$ or set $B$, $1\le M_i\le 10^{17}$.&lt;br&gt;For any $M_i$ and $M_j$, $|M_i-M_j|\le 10^6$.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Output]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For every test case, you should output an integer denoting the number of all different legal sequences with length $n$, which should be a remainder divided by $1000000007$.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Sample Input]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1&lt;br&gt;2 10 2&lt;br&gt;2 6&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Sample Output]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;16&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Author]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Qiushi Li&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;ul&gt;&lt;li&gt;Time Limit: 1s&lt;/li&gt;&lt;li&gt;Memory Limit: 256MB&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;[Description]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There is a long character sequence with length $n$. For its every bit, we can choose a character from set $S$ which contains $|S|$ characters.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Code Formatting</title>
    <link href="http://blog.getline.me/archives/code-formatting.html"/>
    <id>http://blog.getline.me/archives/code-formatting.html</id>
    <published>2015-12-01T02:00:00.000Z</published>
    <updated>2016-04-11T11:59:07.850Z</updated>
    
    <content type="html">&lt;ul&gt;&lt;li&gt;2015 ACM-ICPC Regional Online Contest’s Problem&lt;/li&gt;&lt;li&gt;Time Limit: 1s&lt;/li&gt;&lt;li&gt;Memory Limit: 256MB&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;[Description]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;As we all know, a piece of code may include &lt;code&gt;variable&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and some other &lt;code&gt;program statements&lt;/code&gt; such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, etc.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Usually we cannot guarantee our code is absolutely right. When you didn’t get the verdict - ‘Accepted’, you would start debugging. So in ACMICPC contests, we have team-mates to help us.&lt;/p&gt;&lt;p&gt;When you copy a program to windows from linux and open it with notepad, you can see all in one line.&lt;br&gt;Of course, the code can be compiled with g++ on linux, but it’s not formatted, so it’s too hard to read it.&lt;br&gt;Now you are given a piece of code, and your task is to format the code to make it good.&lt;/p&gt;&lt;p&gt;To make it simple, we define the code only contain &lt;code&gt;header file&lt;/code&gt;, &lt;code&gt;variable&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;scanf&lt;/code&gt;, and &lt;code&gt;expression(e.g. a = b + 1)&lt;/code&gt;&lt;br&gt;Also a piece of code is called good if it obey as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;header file&lt;ul&gt;&lt;li&gt;A space between &lt;code&gt;#include&lt;/code&gt; and &lt;code&gt;&amp;lt;XXX&amp;gt;&lt;/code&gt; is required. And &lt;code&gt;XXX&lt;/code&gt; in &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; can be any correct header file.&lt;/li&gt;&lt;li&gt;You can only declare one header file in one line.&lt;/li&gt;&lt;li&gt;It is guaranteed that all header files declaration are at the very beginning of the code.&lt;/li&gt;&lt;li&gt;A blank line is required after all header files if header files exist.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;variable declaration&lt;br&gt;&lt;code&gt;X A, B, C, ...;&lt;/code&gt;&lt;ul&gt;&lt;li&gt;Assuming that &lt;code&gt;X&lt;/code&gt; can be only &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; or &lt;code&gt;char&lt;/code&gt;, and there must be at least one space after &lt;code&gt;X&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;You can only declare one type of variable in one line.&lt;/li&gt;&lt;li&gt;The comma(&lt;code&gt;,&lt;/code&gt;) is used to split variables in one type in one line. And a space is required after the comma(&lt;code&gt;,&lt;/code&gt;).&lt;/li&gt;&lt;li&gt;It is guaranted that there must be a space between &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, …, are the name of variable, and guarantee that no calculation, just declaration.&lt;/li&gt;&lt;li&gt;The name of variable can be any &lt;em&gt;except “scanf” and “printf”&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;function&lt;br&gt;&lt;code&gt;X Y(A a, B b, ...){}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt; is the type of the function, which can be 4 variables above plus &lt;code&gt;void&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt; is the name of the function, which can be any &lt;em&gt;except “scanf” and “printf”&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; the type of variable &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is the name which can be any.&lt;/li&gt;&lt;li&gt;A space is required between &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;...&lt;/code&gt; means if the function have more parameters, the format is the same as above.&lt;/li&gt;&lt;li&gt;There can be any parameters(0 included) in each function.&lt;/li&gt;&lt;li&gt;It is guaranteed that there will be a space between &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;if&lt;br&gt;&lt;code&gt;if(X){}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt; is an expression&lt;/li&gt;&lt;li&gt;There must be &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; after &lt;code&gt;if(X)&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;for&lt;br&gt;&lt;code&gt;for(X; Y; Z){}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt; are three expressions split by &lt;code&gt;;&lt;/code&gt;, and a space is required after each &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;There must be &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; after &lt;code&gt;for(X; Y; Z)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt; can be empty (e.g. &lt;code&gt;for(; ; )&lt;/code&gt;, &lt;code&gt;for(X; ; Z)&lt;/code&gt;, &lt;code&gt;for(; Y; )&lt;/code&gt;, etc)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;printf&lt;br&gt;&lt;code&gt;printf(&amp;quot;X&amp;quot;, Y, Z, ...);&lt;/code&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt; in &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; is a string which you shouldn’t change it.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Y, Z, ...&lt;/code&gt; are expressions split by &lt;code&gt;,&lt;/code&gt;, and a space is required after each &lt;code&gt;,&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The number of expressions can be 0 or more.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;scanf&lt;br&gt;&lt;code&gt;scanf(&amp;quot;X&amp;quot;, &amp;amp;Y, Z, ...);&lt;/code&gt;&lt;ul&gt;&lt;li&gt;Abosolutely the same with &lt;code&gt;printf&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;expression&lt;ul&gt;&lt;li&gt;There could be &lt;code&gt;variables&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt;(&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;) and some &lt;code&gt;constant&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;For each &lt;code&gt;operator&lt;/code&gt;, a space is required for both sides.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;function&lt;br&gt;&lt;code&gt;X(A, B, C, ...);&lt;/code&gt;&lt;ul&gt;&lt;li&gt;You can call a function after your declaration.&lt;/li&gt;&lt;li&gt;Especially, whatever the type your function is, there will be no &lt;code&gt;return&lt;/code&gt; in function’s &lt;code&gt;{}&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;A, B, C, ...&lt;/code&gt; are expressions.&lt;/li&gt;&lt;li&gt;Function call cannot appear in expressions. Although this may be rediculous, it’s much more easier for your coding.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In addition, there can be many &lt;code&gt;expressions&lt;/code&gt;, &lt;code&gt;scanf&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;variable declaration&lt;/code&gt; inside &lt;code&gt;{}&lt;/code&gt;&lt;br&gt;&lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; should both take up one line.&lt;br&gt;The rule inside &lt;code&gt;{}&lt;/code&gt; is the same, but should start with two more space.&lt;/p&gt;&lt;p&gt;In all, all characters appear in your code can be only &lt;code&gt;[a-z][A-Z][0-9]&amp;lt;&amp;gt;()\+-*/=!,;.%&amp;amp;#&amp;quot;&amp;#39;&lt;/code&gt; and space.&lt;/p&gt;&lt;p&gt;The sample involved all rules above. Just have a look at it to unstander better.&lt;/p&gt;&lt;p&gt;It is guaranteed that the code after formatting can be compiled by g++, so your task is only to format it!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Input]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Multiple case(no more than 100), each case is a peice of code in one line.&lt;br&gt;The length of each piece of code, which in one line, is no more than 1000.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Output]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For each case, output &lt;code&gt;Case #k:&lt;/code&gt; in one line first, which &lt;code&gt;k&lt;/code&gt; starts from &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;And then output the code which is called good.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Sample Input]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2&lt;/p&gt;&lt;p&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;int max;void Solve(int a,int b){ if ( a&amp;gt;max){max=a;} if ( b &amp;gt; max){max=b;}} int n,m;double x;int main() {scanf(“%d”, &amp;amp;n); int i;for(i=0; i&amp;lt;n;i=i+1) { int a; a=i+1;printf(“a=%d”, a);Solve(i,i+1);} printf(“%d\n”, max);printf(“example with no parameter.”); }&lt;/cstring&gt;&lt;/cstdlib&gt;&lt;/cstdio&gt;&lt;/p&gt;&lt;p&gt;#include &amp;lt; cstdio &amp;gt; int main(){printf(“\””);}&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Sample Output]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Case #1:&lt;/p&gt;&lt;p&gt;#include&lt;cstdio&gt;&lt;/cstdio&gt;&lt;/p&gt;&lt;p&gt;#include&lt;cstdlib&gt;&lt;/cstdlib&gt;&lt;/p&gt;&lt;p&gt;#include&lt;cstring&gt;&lt;/cstring&gt;&lt;/p&gt;&lt;p&gt;int max;&lt;br&gt;void Solve(int a, int b)&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;if(a &amp;gt; max)&lt;br&gt;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;max = a;&lt;br&gt;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;if(b &amp;gt; max)&lt;br&gt;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;max = b;&lt;br&gt;&amp;nbsp;&amp;nbsp;}&lt;br&gt;}&lt;br&gt;int n, m;&lt;br&gt;double x;&lt;br&gt;int main()&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;scanf(“%d”, &amp;amp;n);&lt;br&gt;&amp;nbsp;&amp;nbsp;int i;&lt;br&gt;&amp;nbsp;&amp;nbsp;for(i = 0; i &amp;lt; n; i = i + 1)&lt;br&gt;&amp;nbsp;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int a;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a = i + 1;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(“a=%d”, a);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Solve(i, i + 1);&lt;br&gt;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;printf(“%d\n”, max);&lt;br&gt;&amp;nbsp;&amp;nbsp;printf(“example with no parameter.”);&lt;br&gt;}&lt;br&gt;Case #2:&lt;/p&gt;&lt;p&gt;#include&lt;cstdio&gt;&lt;/cstdio&gt;&lt;/p&gt;&lt;p&gt;int main()&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;printf(“\””);&lt;br&gt;}&lt;/p&gt;&lt;p&gt;&lt;strong&gt;[Author]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Qiushi Li&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;ul&gt;&lt;li&gt;2015 ACM-ICPC Regional Online Contest’s Problem&lt;/li&gt;&lt;li&gt;Time Limit: 1s&lt;/li&gt;&lt;li&gt;Memory Limit: 256MB&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;[Description]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;As we all know, a piece of code may include &lt;code&gt;variable&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and some other &lt;code&gt;program statements&lt;/code&gt; such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, etc.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.getline.me/archives/hello-world.html"/>
    <id>http://blog.getline.me/archives/hello-world.html</id>
    <published>2014-11-11T02:00:00.000Z</published>
    <updated>2016-04-11T11:59:07.850Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
